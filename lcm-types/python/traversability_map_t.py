"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class traversability_map_t(object):

    __slots__ = ["map"]

    __typenames__ = ["int32_t"]

    __dimensions__ = [[100, 100]]

    def __init__(self):
        self.map = [ [ 0 for dim1 in range(100) ] for dim0 in range(100) ]
        """ LCM Type: int32_t[100][100] """

    def encode(self):
        buf = BytesIO()
        buf.write(traversability_map_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        for i0 in range(100):
            buf.write(struct.pack('>100i', *self.map[i0][:100]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != traversability_map_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return traversability_map_t._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = traversability_map_t()
        self.map = []
        for i0 in range(100):
            self.map.append(struct.unpack('>100i', buf.read(400)))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if traversability_map_t in parents: return 0
        tmphash = (0x65bb5bb541c18c9) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if traversability_map_t._packed_fingerprint is None:
            traversability_map_t._packed_fingerprint = struct.pack(">Q", traversability_map_t._get_hash_recursive([]))
        return traversability_map_t._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", traversability_map_t._get_packed_fingerprint())[0]

